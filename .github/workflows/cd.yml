name: Continuous Deployment

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy-web:
    name: Deploy Web Application
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'staging') || 'production' }}
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build web application
      run: npm run build:web
      env:
        VITE_BUILD_VERSION: ${{ github.ref_name }}
        VITE_BUILD_NUMBER: ${{ github.run_number }}
        VITE_GIT_COMMIT: ${{ github.sha }}
        BUILD_TIMESTAMP: ${{ github.event.head_commit.timestamp }}
        VITE_SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
        VITE_ANALYTICS_ID: ${{ secrets.ANALYTICS_ID }}
        
    - name: Deploy to Vercel
      id: deploy
      uses: vercel/vercel-deploy-action@v1
      with:
        token: ${{ secrets.VERCEL_TOKEN }}
        org: ${{ secrets.VERCEL_ORG_ID }}
        project: ${{ secrets.VERCEL_PROJECT_ID }}
        production: ${{ github.ref == 'refs/heads/main' && github.event.inputs.environment == 'production' }}
        
    - name: Upload source maps to Sentry
      run: |
        npx @sentry/cli releases new ${{ github.ref_name }}
        npx @sentry/cli releases files ${{ github.ref_name }} upload-sourcemaps dist/web
        npx @sentry/cli releases finalize ${{ github.ref_name }}
      env:
        SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
        SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}

  deploy-extension:
    name: Deploy Chrome Extension
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build extension
      run: npm run build:extension
      env:
        VITE_BUILD_VERSION: ${{ github.ref_name }}
        VITE_BUILD_NUMBER: ${{ github.run_number }}
        VITE_GIT_COMMIT: ${{ github.sha }}
        
    - name: Package extension
      run: |
        cd dist/extension
        zip -r ../../lucaverse-hub-extension-${{ github.ref_name }}.zip .
        
    - name: Upload to Chrome Web Store
      uses: mnao305/chrome-extension-upload@v4.0.1
      with:
        file-path: lucaverse-hub-extension-${{ github.ref_name }}.zip
        extension-id: ${{ secrets.CHROME_EXTENSION_ID }}
        client-id: ${{ secrets.CHROME_CLIENT_ID }}
        client-secret: ${{ secrets.CHROME_CLIENT_SECRET }}
        refresh-token: ${{ secrets.CHROME_REFRESH_TOKEN }}
        publish: true
        
    - name: Create GitHub release
      uses: ncipollo/release-action@v1
      with:
        artifacts: lucaverse-hub-extension-${{ github.ref_name }}.zip
        token: ${{ secrets.GITHUB_TOKEN }}
        name: Extension Release ${{ github.ref_name }}
        body: |
          ## Chrome Extension Release ${{ github.ref_name }}
          
          ### Changes
          - Automated release from tag ${{ github.ref_name }}
          - Built from commit ${{ github.sha }}
          
          ### Installation
          Download the extension package and install manually or wait for Chrome Web Store approval.

  deploy-electron:
    name: Deploy Electron Apps
    runs-on: ${{ matrix.os }}
    if: startsWith(github.ref, 'refs/tags/v')
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build Electron app
      run: npm run build:electron
      env:
        VITE_BUILD_VERSION: ${{ github.ref_name }}
        VITE_BUILD_NUMBER: ${{ github.run_number }}
        VITE_GIT_COMMIT: ${{ github.sha }}
        
    - name: Build distributables (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: npm run electron:dist:linux
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build distributables (Windows)
      if: matrix.os == 'windows-latest'
      run: npm run electron:dist:win
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build distributables (macOS)
      if: matrix.os == 'macos-latest'
      run: npm run electron:dist:mac
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        CSC_LINK: ${{ secrets.MAC_CERTIFICATE }}
        CSC_KEY_PASSWORD: ${{ secrets.MAC_CERTIFICATE_PASSWORD }}
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_PASSWORD }}
        TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

  health-check:
    name: Post-Deployment Health Check
    runs-on: ubuntu-latest
    needs: [deploy-web]
    if: always() && needs.deploy-web.result == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install dependencies
      run: npm ci
      
    - name: Wait for deployment
      run: sleep 30
      
    - name: Health check
      run: |
        # Get deployment URL from previous job
        DEPLOYMENT_URL="${{ needs.deploy-web.outputs.url }}"
        
        echo "Checking health of: $DEPLOYMENT_URL"
        
        # Basic connectivity check
        curl -f "$DEPLOYMENT_URL" || exit 1
        
        # Check for specific content
        if curl -s "$DEPLOYMENT_URL" | grep -q "Lucaverse Hub"; then
          echo "‚úÖ Application is responding correctly"
        else
          echo "‚ùå Application content check failed"
          exit 1
        fi
        
        # Performance check
        LOAD_TIME=$(curl -o /dev/null -s -w "%{time_total}" "$DEPLOYMENT_URL")
        echo "Load time: ${LOAD_TIME}s"
        
        if (( $(echo "$LOAD_TIME > 5.0" | bc -l) )); then
          echo "‚ö†Ô∏è Warning: Load time exceeds 5 seconds"
        fi
        
    - name: API health check
      run: |
        # Check API endpoints if available
        API_BASE="${{ secrets.API_BASE_URL }}"
        if [ ! -z "$API_BASE" ]; then
          curl -f "$API_BASE/health" || echo "‚ö†Ô∏è API health check failed"
        fi

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [health-check]
    if: failure() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Rollback deployment
      run: |
        echo "üîÑ Rolling back deployment due to health check failure"
        # Implement rollback logic here
        # This could involve:
        # - Reverting to previous Vercel deployment
        # - Updating DNS to point to previous version
        # - Triggering deployment of last known good version
        
    - name: Notify team
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: |
          üö® Deployment failed and rollback initiated
          
          Repository: ${{ github.repository }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
          
          Please investigate the deployment failure.
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  notify-success:
    name: Success Notification
    runs-on: ubuntu-latest
    needs: [health-check]
    if: success()
    
    steps:
    - name: Notify successful deployment
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: |
          ‚úÖ Deployment successful!
          
          Repository: ${{ github.repository }}
          Environment: ${{ github.event.inputs.environment || 'staging' }}
          Version: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
          
          Deployment URL: ${{ needs.deploy-web.outputs.url }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}