name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  CACHE_DEPENDENCY_PATH: package-lock.json

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Run type checking
      run: npm run type-check
      
    - name: Run unit tests
      run: npm run test:coverage
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage/lcov.info
        fail_ci_if_error: true

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level high
      
    - name: Run dependency vulnerability scan
      uses: actions/dependency-review-action@v3
      if: github.event_name == 'pull_request'

  build:
    name: Build All Platforms
    runs-on: ubuntu-latest
    needs: [test, security]
    
    strategy:
      matrix:
        platform: [web, extension, electron]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build ${{ matrix.platform }}
      run: npm run build:${{ matrix.platform }}
      env:
        VITE_BUILD_VERSION: ${{ github.sha }}
        VITE_BUILD_NUMBER: ${{ github.run_number }}
        VITE_GIT_COMMIT: ${{ github.sha }}
        BUILD_TIMESTAMP: ${{ github.event.head_commit.timestamp }}
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ matrix.platform }}-${{ github.sha }}
        path: dist/${{ matrix.platform }}
        retention-days: 30

  performance:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-web-${{ github.sha }}
        path: dist/web
        
    - name: Run bundle analysis
      run: npm run analyze:bundle
      
    - name: Validate performance budgets
      run: npm run validate:performance
      
    - name: Validate optimization
      run: npm run validate:optimization
      
    - name: Upload performance reports
      uses: actions/upload-artifact@v4
      with:
        name: performance-reports-${{ github.sha }}
        path: |
          bundle-analysis-report.json
          bundle-analysis-report.md
          performance-budget-report.json
        retention-days: 90

  accessibility:
    name: Accessibility Testing
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-web-${{ github.sha }}
        path: dist/web
        
    - name: Serve application
      run: npm run preview &
      
    - name: Wait for server
      run: npx wait-on http://localhost:4173
      
    - name: Run accessibility tests
      run: |
        npx @axe-core/cli http://localhost:4173 \
          --save accessibility-report.json \
          --reporter json
          
    - name: Upload accessibility report
      uses: actions/upload-artifact@v4
      with:
        name: accessibility-report-${{ github.sha }}
        path: accessibility-report.json

  validate:
    name: Validation Suite
    runs-on: ubuntu-latest
    needs: [performance, accessibility]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download performance reports
      uses: actions/download-artifact@v4
      with:
        name: performance-reports-${{ github.sha }}
        
    - name: Download accessibility report
      uses: actions/download-artifact@v4
      with:
        name: accessibility-report-${{ github.sha }}
        
    - name: Validate performance regression
      run: |
        # Check if bundle size increased by more than 10%
        if [ -f bundle-analysis-report.json ]; then
          node -e "
            const report = require('./bundle-analysis-report.json');
            const platforms = Object.keys(report.platforms);
            let failed = false;
            
            platforms.forEach(platform => {
              const size = report.platforms[platform].totalSize;
              const limitMB = platform === 'web' ? 3 : platform === 'extension' ? 5 : 10;
              const limitBytes = limitMB * 1024 * 1024;
              
              if (size > limitBytes) {
                console.error(\`‚ùå \${platform} bundle size exceeds limit: \${(size/1024/1024).toFixed(2)}MB > \${limitMB}MB\`);
                failed = true;
              } else {
                console.log(\`‚úÖ \${platform} bundle size OK: \${(size/1024/1024).toFixed(2)}MB\`);
              }
            });
            
            if (failed) process.exit(1);
          "
        fi
        
    - name: Comment PR with results
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          let comment = '## ü§ñ CI Validation Results\n\n';
          
          // Performance results
          if (fs.existsSync('bundle-analysis-report.json')) {
            const report = JSON.parse(fs.readFileSync('bundle-analysis-report.json', 'utf8'));
            comment += '### üìä Bundle Analysis\n\n';
            
            Object.entries(report.platforms).forEach(([platform, data]) => {
              const sizeMB = (data.totalSize / 1024 / 1024).toFixed(2);
              const limit = platform === 'web' ? 3 : platform === 'extension' ? 5 : 10;
              const status = data.totalSize <= limit * 1024 * 1024 ? '‚úÖ' : '‚ùå';
              comment += `- ${status} **${platform}**: ${sizeMB}MB / ${limit}MB\n`;
            });
            
            if (report.recommendations.length > 0) {
              comment += '\n### üí° Recommendations\n\n';
              report.recommendations.forEach(rec => {
                comment += `- ${rec.message}\n`;
              });
            }
          }
          
          // Accessibility results
          if (fs.existsSync('accessibility-report.json')) {
            const report = JSON.parse(fs.readFileSync('accessibility-report.json', 'utf8'));
            comment += '\n### ‚ôø Accessibility\n\n';
            
            if (report.violations && report.violations.length > 0) {
              comment += `‚ùå Found ${report.violations.length} accessibility violations\n\n`;
              report.violations.slice(0, 5).forEach(violation => {
                comment += `- **${violation.impact}**: ${violation.description}\n`;
              });
            } else {
              comment += '‚úÖ No accessibility violations found\n';
            }
          }
          
          comment += '\n---\n*This comment was automatically generated by the CI pipeline*';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [validate]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Notify on success
      if: needs.validate.result == 'success'
      run: |
        echo "‚úÖ All CI checks passed successfully!"
        
    - name: Notify on failure
      if: needs.validate.result == 'failure'
      run: |
        echo "‚ùå CI checks failed. Please review the results."
        exit 1